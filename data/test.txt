Int
0
return 1+-1
----
String
te"sté
return "te\"sté"
----
StringLength
4
return "test".length
----
StringChar
e
str = "test"
return str[1]
----
If
3
if 2 > 3
	return 1
else if true && false
	return 2
else
	return 3
----
While
5
i = 0
while i < 5
	i++
return i
----
Bollean
true
return true and false || 3 >= 2 || !false
----
Fac
3628800
function fac( n )
	val = 1
	for i from 2 to n
		val *= i
	return val
return fac(10)
----
Fibonnaci
55
function fib( n )
	fibn = 0
	fibnp = 1
	for i from 2 to n
			temp = fibnp
		fibnp = fibnp+fibn
		fibn = temp
	return fibnp
return fib( 10)
----
Encapsulation
0
val = 0
function fac( n )
	val = 1
	return val
a = fac(10)
return val
----
References
0
val = 0
vala = "az"
function fac( val, vala )
	val = 1
fac(val, vala)
return val
----
Class
1
class Complex
	x = 0
	y = 0

	function contruct(x, y)
		this.x = x
		this.y = y

	function test()
		return this.x + this.y

complex = new Complex(1, 0)
return complex.test()
----
Chainé
1
class Test
	x = 1
class Test2
	x = new Test()
return (new Test2()).x.x
----
Static
0
class Static
	static x = 1

	static function test()
		return self.x

Static.x = 0
return Static.test()
----
Inheritance
0
class Father
	x = 1

	function test()
		return this.x

class Son : Father
	x = 0

return (new Son()).test()
----
Operator overloading
1
class Complex
	x = 0
	y = 0

	function contruct(x, y)
		this.x = x
		this.y = y

	operator +(operand)
		return new Complex(this.x + operand.x, this.y + operand.y)

return ((new Complex(1, 0)) + (new Complex(0, 1))).x
----
Collection
3
collec = [1, 1+1, 4-1]
return collec[2]
----
Collection edit
3
collec = new Collection()
collec.add(1)
collec[0] = 3
return collec[0]
----
Matrix
3
collec = []
collec.add([1,2,3])
collec.add([1,2,3])
collec[1][1] = 3
return collec[1][1]
----
Map
1
map = new Map()
map["a"] = 1
return map["a"]
----
